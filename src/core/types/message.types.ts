import type { CoreMessage } from 'ai';

/**
 * Base role types for messages
 *
 * These roles represent different actors in a conversation:
 * - USER: The end-user interacting with the system
 * - ASSISTANT: The AI assistant responding to the user
 * - SYSTEM: System-level instructions and configurations
 * - HUMAN_AGENT: A human operator who can temporarily take over the assistant's role
 * - TOOL: Messages from tool executions
 * - FUNCTION: Messages from function calls
 * - DEVELOPER: Messages from developers for testing or debugging
 */
export enum MessageRole {
  /** The end-user who initiates the conversation and interacts with the system */
  USER = 'user',

  /** The AI assistant that processes and responds to user queries */
  ASSISTANT = 'assistant',

  /** System-level messages that provide context, instructions, or configuration */
  SYSTEM = 'system',

  /**
   * A human operator who can temporarily take over the assistant's role.
   * This role is distinct from USER as it represents a third party that can
   * intervene in the conversation between the user and assistant.
   */
  HUMAN_AGENT = 'human_agent',

  /** Messages generated by tool executions */
  TOOL = 'tool',

  /** Messages from function calls within the system */
  FUNCTION = 'function',

  /** Messages from developers, typically used for testing or debugging purposes */
  DEVELOPER = 'developer',
}

/**
 * Test case definition using Vercel AI SDK CoreMessage type
 */
export interface TestCase {
  id: string;
  name: string;
  messageBlocks: CoreMessage[];
}

// Re-export CoreMessage as BaseMessage for backward compatibility during migration
export type BaseMessage = CoreMessage;
